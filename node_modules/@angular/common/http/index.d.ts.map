{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v14.3.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\n\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ModuleWithProviders } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { XhrFactory as XhrFactory_2 } from '@angular/common';\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport declare const HTTP_INTERCEPTORS: InjectionToken<HttpInterceptor[]>;\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport declare abstract class HttpBackend implements HttpHandler {\n    abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nexport declare class HttpClient {\n    private handler;\n    constructor(handler: HttpHandler);\n    /**\n     * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n     *\n     * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n     */\n    request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n    /**\n     * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n     * an `ArrayBuffer`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a request that interprets the body as a blob and returns\n     * the response as a blob.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a request that interprets the body as a text string and\n     * returns a string value.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n     * the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n     * the request.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a request that interprets the body as a `Blob` and returns\n     * the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a request which interprets the body as a text string and returns the full event\n     * stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object and returns the full\n     * event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the  request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body of type `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object and returns the full\n     * event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<R>>;\n    /**\n     * Constructs a request which interprets the body as an `ArrayBuffer`\n     * and returns the full `HttpResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a request which interprets the body as a text stream and returns the full\n     * `HttpResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the HTTP response, with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object and returns the full\n     * `HttpResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse`,\n     * with the response body of type `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object and returns\n     * the full `HttpResponse` with the response body in the requested type.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<R>>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object and returns the full\n     * `HttpResponse` as a JavaScript object.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a request which interprets the body as a JavaScript object\n     * with the response body of the requested type.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<R>;\n    /**\n     * Constructs a request where response type and requested observable are not known statically.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the requested response, with body of type `any`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        observe?: 'body' | 'events' | 'response';\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    }): Observable<any>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n     *  and returns the response as an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response body as a `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text string and returns\n     * a string.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<string>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n     * `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with the response\n     * body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n     * type `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `DELETE`request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n     * body in the requested type.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | (string | number | boolean)[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n     *  the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n     * `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text stream and\n     *  returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n     * the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n     *\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as JSON and\n     * returns the response body as an object parsed from JSON.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Object`.\n     */\n    delete(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<Object>;\n    /**\n     * Constructs a DELETE request that interprets the body as JSON and returns\n     * the response in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n     */\n    delete<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n        body?: any | null;\n    }): Observable<T>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n     * response in an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob`\n     * and returns the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text string\n     * and returns the response as a string value.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n     *  the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with the response\n     * body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text string and returns\n     * the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON and returns the full\n     * event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with a response body in the requested type.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob` and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text stream and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse`,\n     * with the response body of type `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON and\n     * returns the response body as an object parsed from JSON.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     *\n     * @return An `Observable` of the response body as a JavaScript object.\n     */\n    get(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `GET` request that interprets the body as JSON and returns\n     * the response body in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n     */\n    get<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n     * returns the response as an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the response, with the response body as a `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n     * as a string value.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as a `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n     * string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as JSON\n     * and returns the full HTTP event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n     * type `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as JSON and\n     * returns the full event stream.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with a response body in the requested type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full HTTP response.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n     * the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a blob.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as text stream\n     * and returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as JSON and\n     * returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body of the requested type.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n\n     * Constructs a `HEAD` request that interprets the body as JSON and\n     * returns the response body as an object parsed from JSON.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n     */\n    head(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as JSON and returns\n     * the response in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body of the given type.\n     */\n    head<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     * @return An `Observable` of the response object, with response body as an object.\n     */\n    jsonp(url: string, callbackParam: string): Observable<Object>;\n    /**\n     * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n     * If no such interceptor is reached,\n     * then the `JSONP` request can be rejected by the configured backend.\n     *\n     * @return An `Observable` of the response object, with response body in the requested type.\n     */\n    jsonp<T>(url: string, callbackParam: string): Observable<T>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an\n     * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a text string and\n     * returns a string value.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request with the response\n     * body of type `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as JSON and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with a response body in the requested type.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n     *  and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as text stream\n     * and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as JSON and\n     * returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n\n     * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n     * response body as an object parsed from JSON.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n     */\n    options(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n     * response in a given type.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n     */\n    options<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n     * the response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n     * as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n     *  returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob`\n     *  and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request, with the\n     * response body as `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a text string and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request, with a\n     * response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with a response body of type `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as JSON\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvent`s for the request,\n     * with a response body in the requested type.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n     * `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n     * full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with a response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the given type.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n\n     * Constructs a `PATCH` request that interprets the body as JSON and\n     * returns the response body as an object parsed from JSON.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n     */\n    patch(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as JSON\n     * and returns the response in a given type.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the given type.\n     */\n    patch<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n     * an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n     * response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob`\n     * and returns the response in an observable of the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text string and returns the full\n     * event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of all `HttpEvent`s for the request,\n     * with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a POST request that interprets the body as JSON and returns the full\n     * event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of all `HttpEvent`s for the request,\n     * with a response body of type `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a POST request that interprets the body as JSON and returns the full\n     * event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with a response body in the requested type.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a POST request that interprets the body as an `ArrayBuffer`\n     *  and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n     * `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n     * `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text stream and returns\n     * the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `POST` request that interprets the body as JSON\n     * and returns the full `HttpResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n     * `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `POST` request that interprets the body as JSON and returns the\n     * full `HttpResponse`.\n     *\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n     * requested type.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `POST` request that interprets the body as JSON\n     * and returns the response body as an object parsed from JSON.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n     */\n    post(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `POST` request that interprets the body as JSON\n     * and returns an observable of the response.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n     * requested type.\n     */\n    post<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n     * response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n     * stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n     * stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n     * of type string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as JSON and returns the full\n     * event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n     * type `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as JSON and returns the\n     * full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvent`s for the request,\n     * with a response body in the requested type.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an\n     * `ArrayBuffer` and returns an observable of the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n     * `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n     * full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text stream and returns the\n     * full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n     * string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as JSON and returns the full\n     * HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request, with a response body\n     * of type 'Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n     * returns the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        context?: HttpContext;\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as JSON\n     * and returns an observable of JavaScript object.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response as a JavaScript object.\n     */\n    put(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an instance of the requested type\n     * and returns an observable of the requested type.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the requested type.\n     */\n    put<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        context?: HttpContext;\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<HttpClient, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<HttpClient>;\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nexport declare class HttpClientJsonpModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<HttpClientJsonpModule, never>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<HttpClientJsonpModule, never, never, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<HttpClientJsonpModule>;\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nexport declare class HttpClientModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<HttpClientModule, never>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<HttpClientModule, never, [typeof HttpClientXsrfModule], never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<HttpClientModule>;\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nexport declare class HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable(): ModuleWithProviders<HttpClientXsrfModule>;\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options?: {\n        cookieName?: string;\n        headerName?: string;\n    }): ModuleWithProviders<HttpClientXsrfModule>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<HttpClientXsrfModule, never>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<HttpClientXsrfModule, never, never, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<HttpClientXsrfModule>;\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport declare class HttpContext {\n    private readonly map;\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set<T>(token: HttpContextToken<T>, value: T): HttpContext;\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get<T>(token: HttpContextToken<T>): T;\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token: HttpContextToken<unknown>): HttpContext;\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token: HttpContextToken<unknown>): boolean;\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys(): IterableIterator<HttpContextToken<unknown>>;\n}\n\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport declare class HttpContextToken<T> {\n    readonly defaultValue: () => T;\n    constructor(defaultValue: () => T);\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport declare interface HttpDownloadProgressEvent extends HttpProgressEvent {\n    type: HttpEventType.DownloadProgress;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     */\n    partialText?: string;\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport declare class HttpErrorResponse extends HttpResponseBase implements Error {\n    readonly name = \"HttpErrorResponse\";\n    readonly message: string;\n    readonly error: any | null;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    readonly ok = false;\n    constructor(init: {\n        error?: any;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport declare type HttpEvent<T> = HttpSentEvent | HttpHeaderResponse | HttpResponse<T> | HttpProgressEvent | HttpUserEvent<T>;\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport declare enum HttpEventType {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent = 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress = 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader = 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress = 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response = 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User = 5\n}\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport declare abstract class HttpHandler {\n    abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport declare class HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init?: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n    readonly type: HttpEventType.ResponseHeader;\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update?: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpHeaderResponse;\n}\n\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport declare class HttpHeaders {\n    /**\n     * Internal map of lowercase header names to values.\n     */\n    private headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    private normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     */\n    private lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    private lazyUpdate;\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers?: string | {\n        [name: string]: string | string[];\n    });\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name: string): boolean;\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name: string): string | null;\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys(): string[];\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name: string): string[] | null;\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name: string, value: string | string[]): HttpHeaders;\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name: string, value: string | string[]): HttpHeaders;\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name: string, value?: string | string[]): HttpHeaders;\n    private maybeSetNormalizedName;\n    private init;\n    private copyFrom;\n    private clone;\n    private applyUpdate;\n}\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n *\n */\nexport declare interface HttpInterceptor {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport declare interface HttpParameterCodec {\n    encodeKey(key: string): string;\n    encodeValue(value: string): string;\n    decodeKey(key: string): string;\n    decodeValue(value: string): string;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport declare class HttpParams {\n    private map;\n    private encoder;\n    private updates;\n    private cloneFrom;\n    constructor(options?: HttpParamsOptions);\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param: string): boolean;\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param: string): string | null;\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param: string): string[] | null;\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys(): string[];\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param: string, value: string | number | boolean): HttpParams;\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params: {\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n    }): HttpParams;\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param: string, value: string | number | boolean): HttpParams;\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param: string, value?: string | number | boolean): HttpParams;\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString(): string;\n    private clone;\n    private init;\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport declare interface HttpParamsOptions {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     */\n    fromString?: string;\n    /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n    fromObject?: {\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n    };\n    /** Encoding codec used to parse and serialize the parameters. */\n    encoder?: HttpParameterCodec;\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport declare interface HttpProgressEvent {\n    /**\n     * Progress event type is either upload or download.\n     */\n    type: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\n    /**\n     * Number of bytes uploaded or downloaded.\n     */\n    loaded: number;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     */\n    total?: number;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport declare class HttpRequest<T> {\n    readonly url: string;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    readonly body: T | null;\n    /**\n     * Outgoing headers for this request.\n     */\n    readonly headers: HttpHeaders;\n    /**\n     * Shared and mutable context that can be used by interceptors\n     */\n    readonly context: HttpContext;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n    readonly reportProgress: boolean;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    readonly withCredentials: boolean;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    readonly responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    /**\n     * The outgoing HTTP request method.\n     */\n    readonly method: string;\n    /**\n     * Outgoing URL parameters.\n     *\n     * To pass a string representation of HTTP parameters in the URL-query-string format,\n     * the `HttpParamsOptions`' `fromString` may be used. For example:\n     *\n     * ```\n     * new HttpParams({fromString: 'angular=awesome'})\n     * ```\n     */\n    readonly params: HttpParams;\n    /**\n     * The outgoing URL with all URL parameters set.\n     */\n    readonly urlWithParams: string;\n    constructor(method: 'DELETE' | 'GET' | 'HEAD' | 'JSONP' | 'OPTIONS', url: string, init?: {\n        headers?: HttpHeaders;\n        context?: HttpContext;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    constructor(method: 'POST' | 'PUT' | 'PATCH', url: string, body: T | null, init?: {\n        headers?: HttpHeaders;\n        context?: HttpContext;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    constructor(method: string, url: string, body: T | null, init?: {\n        headers?: HttpHeaders;\n        context?: HttpContext;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    });\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody(): ArrayBuffer | Blob | FormData | string | null;\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader(): string | null;\n    clone(): HttpRequest<T>;\n    clone(update: {\n        headers?: HttpHeaders;\n        context?: HttpContext;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        body?: T | null;\n        method?: string;\n        url?: string;\n        setHeaders?: {\n            [name: string]: string | string[];\n        };\n        setParams?: {\n            [param: string]: string;\n        };\n    }): HttpRequest<T>;\n    clone<V>(update: {\n        headers?: HttpHeaders;\n        context?: HttpContext;\n        reportProgress?: boolean;\n        params?: HttpParams;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n        body?: V | null;\n        method?: string;\n        url?: string;\n        setHeaders?: {\n            [name: string]: string | string[];\n        };\n        setParams?: {\n            [param: string]: string;\n        };\n    }): HttpRequest<V>;\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport declare class HttpResponse<T> extends HttpResponseBase {\n    /**\n     * The response body, or `null` if one was not returned.\n     */\n    readonly body: T | null;\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init?: {\n        body?: T | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n    readonly type: HttpEventType.Response;\n    clone(): HttpResponse<T>;\n    clone(update: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<T>;\n    clone<V>(update: {\n        body?: V | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<V>;\n}\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport declare abstract class HttpResponseBase {\n    /**\n     * All response headers.\n     */\n    readonly headers: HttpHeaders;\n    /**\n     * Response status code.\n     */\n    readonly status: number;\n    /**\n     * Textual description of response status code, defaults to OK.\n     *\n     * Do not depend on this.\n     */\n    readonly statusText: string;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     */\n    readonly url: string | null;\n    /**\n     * Whether the status code falls in the 2xx range.\n     */\n    readonly ok: boolean;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     */\n    readonly type: HttpEventType.Response | HttpEventType.ResponseHeader;\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }, defaultStatus?: number, defaultStatusText?: string);\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport declare interface HttpSentEvent {\n    type: HttpEventType.Sent;\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport declare const enum HttpStatusCode {\n    Continue = 100,\n    SwitchingProtocols = 101,\n    Processing = 102,\n    EarlyHints = 103,\n    Ok = 200,\n    Created = 201,\n    Accepted = 202,\n    NonAuthoritativeInformation = 203,\n    NoContent = 204,\n    ResetContent = 205,\n    PartialContent = 206,\n    MultiStatus = 207,\n    AlreadyReported = 208,\n    ImUsed = 226,\n    MultipleChoices = 300,\n    MovedPermanently = 301,\n    Found = 302,\n    SeeOther = 303,\n    NotModified = 304,\n    UseProxy = 305,\n    Unused = 306,\n    TemporaryRedirect = 307,\n    PermanentRedirect = 308,\n    BadRequest = 400,\n    Unauthorized = 401,\n    PaymentRequired = 402,\n    Forbidden = 403,\n    NotFound = 404,\n    MethodNotAllowed = 405,\n    NotAcceptable = 406,\n    ProxyAuthenticationRequired = 407,\n    RequestTimeout = 408,\n    Conflict = 409,\n    Gone = 410,\n    LengthRequired = 411,\n    PreconditionFailed = 412,\n    PayloadTooLarge = 413,\n    UriTooLong = 414,\n    UnsupportedMediaType = 415,\n    RangeNotSatisfiable = 416,\n    ExpectationFailed = 417,\n    ImATeapot = 418,\n    MisdirectedRequest = 421,\n    UnprocessableEntity = 422,\n    Locked = 423,\n    FailedDependency = 424,\n    TooEarly = 425,\n    UpgradeRequired = 426,\n    PreconditionRequired = 428,\n    TooManyRequests = 429,\n    RequestHeaderFieldsTooLarge = 431,\n    UnavailableForLegalReasons = 451,\n    InternalServerError = 500,\n    NotImplemented = 501,\n    BadGateway = 502,\n    ServiceUnavailable = 503,\n    GatewayTimeout = 504,\n    HttpVersionNotSupported = 505,\n    VariantAlsoNegotiates = 506,\n    InsufficientStorage = 507,\n    LoopDetected = 508,\n    NotExtended = 510,\n    NetworkAuthenticationRequired = 511\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport declare interface HttpUploadProgressEvent extends HttpProgressEvent {\n    type: HttpEventType.UploadProgress;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport declare class HttpUrlEncodingCodec implements HttpParameterCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key: string): string;\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value: string): string;\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key: string): string;\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value: string): string;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport declare interface HttpUserEvent<T> {\n    type: HttpEventType.User;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nexport declare class HttpXhrBackend implements HttpBackend {\n    private xhrFactory;\n    constructor(xhrFactory: XhrFactory_2);\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<HttpXhrBackend, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<HttpXhrBackend>;\n}\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport declare abstract class HttpXsrfTokenExtractor {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     */\n    abstract getToken(): string | null;\n}\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\ndeclare abstract class JsonpCallbackContext {\n    [key: string]: (data: any) => void;\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nexport declare class JsonpClientBackend implements HttpBackend {\n    private callbackMap;\n    private document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n    private readonly resolvedPromise;\n    constructor(callbackMap: JsonpCallbackContext, document: any);\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    private nextCallback;\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req: HttpRequest<never>): Observable<HttpEvent<any>>;\n    private removeListeners;\n    static ɵfac: i0.ɵɵFactoryDeclaration<JsonpClientBackend, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<JsonpClientBackend>;\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nexport declare class JsonpInterceptor {\n    private jsonp;\n    constructor(jsonp: JsonpClientBackend);\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<JsonpInterceptor, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<JsonpInterceptor>;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport declare type XhrFactory = XhrFactory_2;\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport declare const XhrFactory: typeof XhrFactory_2;\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nexport declare class ɵHttpInterceptingHandler implements HttpHandler {\n    private backend;\n    private injector;\n    private chain;\n    constructor(backend: HttpBackend, injector: Injector);\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ɵHttpInterceptingHandler, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<ɵHttpInterceptingHandler>;\n}\n\nexport { }\n"]}